class Solution {
public:
    bool bfs(int src,vector<vector<int>>& graph,vector<int> &color){
        color[src]=1;
        queue<int> q;
        q.push(src);
        
        while(!q.empty()){
            int u=q.front();
            q.pop();
            
            
            for(auto i:graph[u]){
                if( color[i]==-1){
					//Assign alternate color to its neighbors.
                    color[i]=1-color[u];
                    q.push(i);
                }
                else if(color[i]==color[u])return false; // If neighbor is of same color returnn false.
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        
        int v=graph.size();
		// Create a color array to store colors assigned to all 
		// veritces. Vertex/ number is used as index in this 
		// array. The value '-1' of colorArr[i] is used to 
		// indicate that no color is assigned to vertex 'i'. 
		// The value 1 is used to indicate first color is 
		// assigned and value 0 indicates second color is 
		// assigned. 
        vector<int> color(v,-1);//for(int i=0;i<v;i++)color[i]=-1;
		//Handles if graph is disconnected.
        for(int i=0;i<v;i++){
            if(color[i]==-1){
                if(!bfs(i,graph,color))return false;
            }
        }
        return true;
        
        
    }
};


**********************************************************************    DFS     ********************************************************************************
#include <bits/stdc++.h>
using namespace std;

bool bipartiteDfs(int node, vector<int> adj[], int color[]) {
    for(auto it : adj[node]) {
        if(color[it] == -1) {
            color[it] = 1 - color[node];
            if(!bipartiteDfs(it, adj, color)) {
                return false; 
            }
        } else if(color[it] == color[node]) return false; 
    }
    return true; 
}
bool checkBipartite(vector<int> adj[], int n) {
    int color[n];
    memset(color, -1, sizeof color); 
    for(int i = 0;i<n;i++) {
        if(color[i] == -1) {
            color[i] = 1;
            if(!bipartiteDfs(i, adj, color)) {
                return false;
            }
        } 
    }
    return true; 
}
int main() {
    int n, m;
    cin >> n >> m;
    vector<int> adj[n];
    for(int i = 0;i<m;i++) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v); 
        adj[v].push_back(u); 
    }
    
    if(checkBipartite(adj, n)) {
        cout << "yes"; 
    } else {
        cout << "No"; 
    }
    return 0;
}
