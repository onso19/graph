#include<bits/stdc++.h>
#include <iostream>
using namespace std;
void bfs(int currentvertex, vector<int>&storingvector,vector<int> adj[],vector<int> &visited)
{
// Initialize a queue
queue<int> q;

//pushing the currentvertex
q.push(currentvertex);
visited[currentvertex]=1;
// now we are running the loop till the queue is not empty
while(!q.empty())
{
int neighbourfindervertex=q.front();
q.pop();
storingvector.push_back(neighbourfindervertex);
for(auto neighbour:adj[neighbourfindervertex]){
   if(!visited[neighbour]){
       q.push(neighbour);
       visited[neighbour]=1;
   } 
}
}
}
int main()
{
int vertex,edges;
cin>>vertex>>edges;

vector<int> adj[vertex+1];

for(int i =1;i<edges+1;i++)
{
	int vertex1,vertex2;
cin>>vertex1>>vertex2;
adj[vertex1].push_back(vertex2);
adj[vertex2].push_back(vertex1);

}

vector<int> visited(vertex+1,0);
vector<int>storingvector;
for(int i =1;i<vertex+1;i++)
{
	if(!visited[i])
	{
		bfs(i,storingvector,adj,visited);
	}
}

for(int i=0;i<storingvector.size();i++){
	cout<<storingvector[i]<<" ";
}

return 0;
 }
/*
9 8
1 5
1 2
5 4
2 3
4 3
4 6
7 8
7 9

output: 1 5 2 4 3 6 7 8 9
*/
