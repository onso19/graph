// O( n^2 ) approach
#include<bits/stdc++.h>
using namespace std;

int main(){
	int N,m;
    //N is number of vertices
    //m is number of edges 
	cin >> N >> m;/
	vector<pair<int,int> > adj[N]; 

	int a,b,wt;
	for(int i = 0; i<m ; i++){
		cin >> a >> b >> wt;
		adj[a].push_back(make_pair(b,wt));// {} ese me bhi bna skte h pair
		adj[b].push_back(make_pair(a,wt));
	}	
	
	int parent[N]; // parent array parent store krne ke lie 
      
    int key[N]; //key array will be marked as infinity, iska use mimmimum value dekhne ke lie kr rhe h
      
    bool mstSet[N]; // mst me check krne ke lie isko mst me include krna h ya ni
  
    for (int i = 0; i < N; i++) // 
        key[i] = INT_MAX, mstSet[i] = false; //initialise
  

    key[0] = 0; 
    parent[0] = -1; 
    int ansWeight = 0;
    for (int count = 0; count < N - 1; count++)//bcoz N-1 edges hoti h mst me
    { 
        
        int mini = INT_MAX, u; 
  
        for (int v = 0; v < N; v++) 
            if (mstSet[v] == false && key[v] < mini) 
                mini = key[v], u = v; // v vertex pr agar key[v]<mini 
                
        mstSet[u] = true; 
        
        for (auto it : adj[u]) {
            int v = it.first;
            int weight = it.second;
            if (mstSet[v] == false && weight < key[v]) 
                parent[v] = u, key[v] = weight; 
        }
            
    } 
    
    
    for (int i = 1; i < N; i++) 
        cout << parent[i] << " - " << i <<" \n"; 
	return 0;
}
