#include<bits/stdc++.h>
#include <iostream>
using namespace std;

bool check_Cycle_yesorno(int currentvertex, int parent ,vector<int> adj[], vector<int> &visited )
{
visited[currentvertex]=1;
// i have marked currentvertex as visited , now the second task we have to do is to visit its neighbour
// we can visit that using our adjacency list
for(auto nextvertex: adj[currentvertex])
{
if(visited[nextvertex]==0)
{
    if(check_Cycle_yesorno(nextvertex,currentvertex,adj,visited))
    return true;
}
//else if(visited[neighbour]!=0)
else if(nextvertex!=parent)
{
return true;
}

}
return false;
}


bool print_Cycle_yesorno(int vertex,vector<int> &visited, vector<int> adj[])
{
for(int i =0;i<vertex;i++)
{
    if(!visited[i]){
       if (check_Cycle_yesorno(i,-1,adj,visited)==true)return true;
    }
}
// This false gaurantees that we have not find cycle before
return false;
}

int main()
{
int vertex,edges;
cin>>vertex>>edges;

vector<int> adj[vertex+1];

for(int i =1;i<edges+1;i++)
{
	int vertex1,vertex2;
cin>>vertex1>>vertex2;
adj[vertex1].push_back(vertex2);
//because this is directed graph
//adj[vertex2].push_back(vertex1);

}

vector<int> visited(vertex+1,0);
cout<<print_Cycle_yesorno(vertex,visited,adj);
return 0;
 }
